(function() {
  /**
   * Helper object for working with countries data and extracting information.
   * See countries-data.js for format of the countries data set.
   */
  
  let countries = {
    /**
     * Store all countries from countries-data.js on `countries.all` for convenience.
     */
    all: window.countriesData,
    
    /**
     * Return an array of all countries, with the Name Object replaced by the
     * appropriate translation, or English if not specified (or unknown).  For
     * example, when language="English", you would process the record for Canada into:
     *
     * {
     *     code: "CA",
     *     continent: "Americas",
     *     areaInKm2: 9984670,
     *     population: 36624199,
     *     capital: "Ottawa",
     *     name: "Canada"
     * }
     *
     * Supported languages include:
     *
     * English, Arabic, Chinese, French, Hindi, Korean, Japanese, Russian
     *
     * Uses `countries.all` as the underlying array of countries to be processed.
     *
     * HINT: make sure you don't overwrite the original name object.
     */
    getByLanguage: function(language) {

      var newLang = JSON.parse(JSON.stringify(countries.all));
      for (var i=0; i<newLang.length;i++)
       {
         newLang[i].name=newLang[i].name[language];
       }    

      return newLang;
    },

    /**
     * Return an array of countries with a population greater than or equal to
     * `minPopulation`, and possibly less than equal to `maxPopulation` (if defined)
     * otherwise allow any number greater than `minPopulation`.
     *
     * Uses getByLanguage('English') to get English names for countries.
     *
     * @param {1000000} minPopulation - (Required) minimum population value
     * @param {2000000} maxPopulation - (Optional) maximum population value
     */

    getByPopulation: function(minPopulation, maxPopulation) {
      var newPopulation = [];
      var countryP = countries.getByLanguage("English");     

      if(maxPopulation > 0){
        for(var i = 0; i < countryP.length; i++){
          if(countryP[i].population <= maxPopulation && countryP[i].population >= minPopulation){
            newPopulation.push(countryP[i]);
          }
        }
    }
    else {
      for(var i = 0; i < countryP.length; i++){
        if(countryP[i].population >= minPopulation){
          newPopulation.push(countryP[i]);
        }
      }
    }

     return newPopulation;
    },

    /**
     * Return an array of countries for the given `continent` with an area
     * greater than or equal to the given `area` in square KM.
     *
     * Uses getByLanguage('English') to get English names for countries.
     *
     * @param {String} continent - (Required) name of the continent (e.g., Europe)
     * @param {Number} minArea - (Required) minimum number of KM2 area
     */
    getByAreaAndContinent: function(continent, minArea) {

      var newArea = [];
      var countryC = countries.getByLanguage("English");
      
      for(var i = 0; i < countryC.length;i++){

        if(countryC[i].continent == continent && countryC[i].areaInKm2 >= minArea){
          newArea.push(countryC[i]);
        }
      }

      return newArea;
    }
  };

  /**
   * Helper functions for building table elements.
   */
  let tableHelper = {
    /**
     * Clears (any) existing rows from the #table-rows table body
     */
    clearTable: function() {
      var tableBody = document.querySelector("#table-rows");
      while(tableBody.firstChild){
        tableBody.removeChild(tableBody.firstChild);
      }
    },

    /**
     * Takes a `country.code` (e.g., "CA" for Canada) and returns an <img>
     * element with its `src` property set the appropriate flag image URL
     * for this code, e.g., src="flags/ca.png" for Canada.
     * 
     * Note: Some of the images are missing and may result in a 404 error. 
     * Ignore these errors.
     */
    countryCodeToFlagImg: function(countryCode) {

      //var cell = document.createElement("td");
      var image = document.createElement("img");
      image.src = "flags/"+countryCode.toLowerCase()+".png";
     // cell.appendChild(img);
      return image;
    },

    /**
     * Takes a single `country` object and converts it to a <tr> with <td>
     * child elements for every column in the row.  The row should match the
     * expected format of the table (i.e., flag, code, country, continent, etc).
     * Return the new <tr>...</tr> row.
     *
     * Use the DOM methods document.createElement(), element.appendChild(), etc
     * to create your <tr> row.
     */
    countryToRow: function(countryR) {

      var row = document.createElement("tr");

      var cell = document.createElement("td");
      cell.appendChild(this.countryCodeToFlagImg(countryR.code));
      row.appendChild(cell);

      row.appendChild(this.getTdElement(countryR.code));
      row.appendChild(this.getTdElement(countryR.name));
      row.appendChild(this.getTdElement(countryR.continent));
      row.appendChild(this.getTdElement(countryR.areaInKm2));
      row.appendChild(this.getTdElement(countryR.population));
      row.appendChild(this.getTdElement(countryR.capital));
      
     return row;    
    },

    getTdElement: function(text) {
      var cell = document.createElement("td");
      var cellText = document.createTextNode(text);
      cell.appendChild(cellText);
      
      return cell;
    },

    /**
     * Takes an array of `country` Objects named `countries`, and passes each
     * `country` in the array  to `tableHelper.countryToRow()`.  The resulting
     * rows are then appended to the #table-rows table body element.  Make sure
     * you use `tableHelper.clear()` to remove any existing rows before you do this.
     */
     countriesToTable: function(countriesT) {
      tableHelper.clearTable();
       var tableBody = document.querySelector("#table-rows");
       
       for(var i = 0; i < countriesT.length; i++){
 
         var row = tableHelper.countryToRow(countriesT[i]);

         tableBody.appendChild(row);
       }
     }
    };

  /**
   * Register click handlers for every menu item in the page.  Use the `countries`
   * and `tableHelper` Objects, and their associated methods, to update/populate
   * the #table-rows table body with the appropriate set of countries, based on the
   * menu item clicked.
   *
   * Make sure you also update the #subtitle heading to properly reflect what
   * is in the table after you populate it. For example: "List of Countries
   * and Dependencies - Population between 1 and 2 million" or "List of Countries
   * and Dependencies - All countries in Asia" etc.
   */
  function setupMenuHandlers() {
/*
    var menu_english = document.querySelector("#menu_english");
      menu_english.addEventListener("click",function(){
      tableHelper.countriesToTable(countries.getByLanguage());
      var text = document.querySelector("#subtitle");
      text ="List of Countries and Dependencies in English"; 
    });*/
    document.querySelector("#menu_english").onclick = function () {
      var text = document.querySelector("#subtitle");
      text.innerText = "List of Countries and Dependencies in English";      
      var countriesE = countries.getByLanguage("English");      
      tableHelper.countriesToTable(countriesE);     
    };

    document.querySelector("#menu_arabic").onclick = function () {
      var text = document.querySelector("#subtitle");
      text.innerText = "List of Countries and Dependencies in Arabic";
      var countriesA = countries.getByLanguage("Arabic");
      tableHelper.countriesToTable(countriesA);
    };

    document.querySelector("#menu_chinese").onclick = function () {
      var text = document.querySelector("#subtitle");
      text.innerText = "List of Countries and Dependencies in Chinese (中文)";
      var countriesC = countries.getByLanguage("Chinese");
      tableHelper.countriesToTable(countriesC);
    };

    document.querySelector("#menu_french").onclick = function () {
      var text = document.querySelector("#subtitle");
      text.innerText = "List of Countries and Dependencies in French";
      var countriesF = countries.getByLanguage("French");
      tableHelper.countriesToTable(countriesF);
    };

    document.querySelector("#menu_hindi").onclick = function () {
      var text = document.querySelector("#subtitle");
      text.innerText = "List of Countries and Dependencies in Hindi";

      var countriesH = countries.getByLanguage("Hindi");
      tableHelper.countriesToTable(countriesH);
    };

    document.querySelector("#menu_korean").onclick = function () {
      var text = document.querySelector("#subtitle");
      text.innerText = "List of Countries and Dependencies in Korean";

      var countriesK = countries.getByLanguage("Korean");
      tableHelper.countriesToTable(countriesK);
    };

    document.querySelector("#menu_japanese").onclick = function () {
      var text = document.querySelector("#subtitle");
      text.innerText = "List of Countries and Dependencies in Japanese";

      var countriesJ = countries.getByLanguage("Japanese");
      tableHelper.countriesToTable(countriesJ);
    };

    document.querySelector("#menu_russian").onclick = function () {
      var text = document.querySelector("#subtitle");
      text.innerText = "List of Countries and Dependencies in Russian";

      var countriesR = countries.getByLanguage("Russian");
      tableHelper.countriesToTable(countriesR);
    };

    document.querySelector("#menu_population_100_000_000m").onclick = function () {
      var text = document.querySelector("#subtitle");
      text.innerText = "List of Countries and Dependencies greater than 100000000";

      var pop = countries.getByPopulation(100000000);
      tableHelper.countriesToTable(pop);
    };

    document.querySelector("#menu_population_1m_2m").onclick = function () {
      var text = document.querySelector("#subtitle");
      text.innerText = "List of Countries and Dependencies between 1 and 2 million";
      var pop = countries.getByPopulation(1000000, 2000000);
      tableHelper.countriesToTable(pop);
    };

    document.querySelector("#menu_americas_1mkm").onclick = function () {
      var text = document.querySelector("#subtitle");
      text.innerText = "List of Countries and Dependencies in Americas with area greater than 1 million Km2";

      var america = countries.getByAreaAndContinent("Americas", 1000000);
      tableHelper.countriesToTable(america);
    };

    document.querySelector("#menu_asia_all").onclick = function () {
      var text = document.querySelector("#subtitle");
      text.innerText = "List of Countries and Dependencies in Asia";

      var asiaC = countries.getByAreaAndContinent("Asia", 0);
      tableHelper.countriesToTable(asiaC);
    };
  }

  // When the page loads, setup all event handlers by calling setup function.
  window.onload = setupMenuHandlers;
})();
